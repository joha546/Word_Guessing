import random
import tkinter as tk
from tkinter import messagebox

class HangmanGUI:
    def __init__(self, words):
        self.words = words
        self.max_wrong_guesses = 6
        self.wrong_guesses = 0
        self.used_letters = []
        self.target_word = ""
        self.progress = []

        self.window = tk.Tk()
        self.window.title("Hangman Game")

        self.word_label = tk.Label(self.window, text="Word: ")
        self.word_label.pack()

        self.used_label = tk.Label(self.window, text="Used Letters: ")
        self.used_label.pack()

        self.guess_label = tk.Label(self.window, text="Enter your guess: ")
        self.guess_label.pack()

        self.guess_entry = tk.Entry(self.window)
        self.guess_entry.pack()

        self.guess_button = tk.Button(self.window, text="Guess", command=self.make_guess)
        self.guess_button.pack()

        self.hangman_canvas = tk.Canvas(self.window, width=300, height=300)
        self.hangman_canvas.pack()

        self.initialize_game()

        self.window.mainloop()

    def initialize_game(self):
        self.wrong_guesses = 0
        self.used_letters = []
        self.target_word = random.choice(self.words).lower()
        self.progress = ["_"] * len(self.target_word)
        self.update_word_label()
        self.update_used_label()
        self.draw_hangman()

    def make_guess(self):
        guess = self.guess_entry.get().lower()
        self.guess_entry.delete(0, tk.END)

        if guess.isalpha() and len(guess) == 1:
            if guess in self.used_letters:
                messagebox.showinfo("Invalid Guess", "You've already guessed that letter. Try again!")
            else:
                self.used_letters.append(guess)
                if guess in self.target_word:
                    self.update_progress(guess)
                    if "_" not in self.progress:
                        self.update_word_label()
                        messagebox.showinfo("Congratulations!", "You won!")
                        self.initialize_game()
                else:
                    self.wrong_guesses += 1
                    self.update_used_label()
                    self.draw_hangman()
                    if self.wrong_guesses == self.max_wrong_guesses:
                        messagebox.showinfo("Game Over", "You've made too many wrong guesses!\nThe word was: {}".format(self.target_word))
                        self.initialize_game()
        else:
            messagebox.showinfo("Invalid Guess", "Please enter a single letter.")

    def update_word_label(self):
        word = " ".join(self.progress)
        self.word_label.config(text="Word: {}".format(word))

    def update_used_label(self):
        used = ", ".join(self.used_letters)
        self.used_label.config(text="Used Letters: {}".format(used))

    def draw_hangman(self):
        self.hangman_canvas.delete("all")
        if self.wrong_guesses == 0:
            self.hangman_canvas.create_line(10, 290, 290, 290)
        elif self.wrong_guesses >= 1:
            self.hangman_canvas.create_line(150, 290, 150, 10)
        if self.wrong_guesses >= 2:
            self.hangman_canvas.create_line(150, 10, 250, 10)
        if self.wrong_guesses >= 3:
            self.hangman_canvas.create_line(250, 10, 250, 40)
        if self.wrong_guesses >= 4:
            self.hangman_canvas.create_oval(225, 40, 275, 90)
        if self.wrong_guesses >= 5:
            self.hangman_canvas.create_line(250, 90, 250, 190)
        if self.wrong_guesses >= 6:
            self.hangman_canvas.create_line(250, 125, 230, 145)
            self.hangman_canvas.create_line(250, 125, 270, 145)

    def update_progress(self, guess):
        for i in range(len(self.target_word)):
            if self.target_word[i] == guess:
                self.progress[i] = guess
        self.update_word_label()

words = [
    "hangman", "python", "programming", "computer", "game", "openai", "intelligence", "algorithm",
    "variable", "function", "class", "loop", "condition", "list", "string", "dictionary", "module",
    "library", "debugging", "recursion", "interface", "inheritance", "polymorphism", "encapsulation",
    "abstraction", "database", "network", "security", "encryption", "web", "internet", "data", "file",
    "input", "output", "error", "exception", "sorting", "searching", "stack", "queue", "tree", "graph",
    "binary", "integer", "float", "boolean", "tuple", "set", "operator", "iteration", "indexing", "slice",
    "range", "random", "math", "datetime", "json", "xml", "html", "css", "javascript", "framework",
    "database", "sql", "mongodb", "django", "flask", "numpy", "pandas", "tensorflow", "matplotlib",
    "pygame", "git", "version", "control", "repository", "agile", "scrum", "testing", "debugging",
    "documentation", "design", "pattern", "software", "development", "project", "team", "client",
    "code", "bug", "feature", "request", "deployment", "virtual", "machine", "cloud", "computing",
    "responsive", "design", "mobile", "app", "user", "interface", "user", "experience", "artificial",
    "neural", "network", "deep", "learning", "machine", "vision", "natural", "language", "processing"
]

game = HangmanGUI(words)
